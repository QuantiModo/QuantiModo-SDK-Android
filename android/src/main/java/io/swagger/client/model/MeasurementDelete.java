/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class MeasurementDelete {
  
  @SerializedName("variableId")
  private Integer variableId = null;
  @SerializedName("startTime")
  private Integer startTime = null;

  /**
   * Variable id of the measurement to be deleted
   **/
  @ApiModelProperty(required = true, value = "Variable id of the measurement to be deleted")
  public Integer getVariableId() {
    return variableId;
  }
  public void setVariableId(Integer variableId) {
    this.variableId = variableId;
  }

  /**
   * Start time of the measurement to be deleted
   **/
  @ApiModelProperty(required = true, value = "Start time of the measurement to be deleted")
  public Integer getStartTime() {
    return startTime;
  }
  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeasurementDelete measurementDelete = (MeasurementDelete) o;
    return (this.variableId == null ? measurementDelete.variableId == null : this.variableId.equals(measurementDelete.variableId)) &&
        (this.startTime == null ? measurementDelete.startTime == null : this.startTime.equals(measurementDelete.startTime));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.variableId == null ? 0: this.variableId.hashCode());
    result = 31 * result + (this.startTime == null ? 0: this.startTime.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeasurementDelete {\n");
    
    sb.append("  variableId: ").append(variableId).append("\n");
    sb.append("  startTime: ").append(startTime).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
