/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import io.swagger.client.model.ConversionStep;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Unit {
  
  @SerializedName("name")
  private String name = null;
  @SerializedName("abbreviatedName")
  private String abbreviatedName = null;
  public enum CategoryEnum {
     Distance,  Duration,  Energy,  Frequency,  Miscellany,  Pressure,  Proportion,  Rating,  Temperature,  Volume,  Weight, 
  };
  @SerializedName("category")
  private CategoryEnum category = null;
  @SerializedName("minimumAllowedValue")
  private Double minimumAllowedValue = null;
  @SerializedName("maximumAllowedValue")
  private Double maximumAllowedValue = null;
  @SerializedName("conversionSteps")
  private List<ConversionStep> conversionSteps = null;

  /**
   * Unit name
   **/
  @ApiModelProperty(required = true, value = "Unit name")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Unit abbreviation
   **/
  @ApiModelProperty(required = true, value = "Unit abbreviation")
  public String getAbbreviatedName() {
    return abbreviatedName;
  }
  public void setAbbreviatedName(String abbreviatedName) {
    this.abbreviatedName = abbreviatedName;
  }

  /**
   * Unit category
   **/
  @ApiModelProperty(required = true, value = "Unit category")
  public CategoryEnum getCategory() {
    return category;
  }
  public void setCategory(CategoryEnum category) {
    this.category = category;
  }

  /**
   * The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
   **/
  @ApiModelProperty(value = "The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.")
  public Double getMinimumAllowedValue() {
    return minimumAllowedValue;
  }
  public void setMinimumAllowedValue(Double minimumAllowedValue) {
    this.minimumAllowedValue = minimumAllowedValue;
  }

  /**
   * The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
   **/
  @ApiModelProperty(value = "The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.")
  public Double getMaximumAllowedValue() {
    return maximumAllowedValue;
  }
  public void setMaximumAllowedValue(Double maximumAllowedValue) {
    this.maximumAllowedValue = maximumAllowedValue;
  }

  /**
   * Conversion steps list
   **/
  @ApiModelProperty(required = true, value = "Conversion steps list")
  public List<ConversionStep> getConversionSteps() {
    return conversionSteps;
  }
  public void setConversionSteps(List<ConversionStep> conversionSteps) {
    this.conversionSteps = conversionSteps;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Unit unit = (Unit) o;
    return (this.name == null ? unit.name == null : this.name.equals(unit.name)) &&
        (this.abbreviatedName == null ? unit.abbreviatedName == null : this.abbreviatedName.equals(unit.abbreviatedName)) &&
        (this.category == null ? unit.category == null : this.category.equals(unit.category)) &&
        (this.minimumAllowedValue == null ? unit.minimumAllowedValue == null : this.minimumAllowedValue.equals(unit.minimumAllowedValue)) &&
        (this.maximumAllowedValue == null ? unit.maximumAllowedValue == null : this.maximumAllowedValue.equals(unit.maximumAllowedValue)) &&
        (this.conversionSteps == null ? unit.conversionSteps == null : this.conversionSteps.equals(unit.conversionSteps));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.abbreviatedName == null ? 0: this.abbreviatedName.hashCode());
    result = 31 * result + (this.category == null ? 0: this.category.hashCode());
    result = 31 * result + (this.minimumAllowedValue == null ? 0: this.minimumAllowedValue.hashCode());
    result = 31 * result + (this.maximumAllowedValue == null ? 0: this.maximumAllowedValue.hashCode());
    result = 31 * result + (this.conversionSteps == null ? 0: this.conversionSteps.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Unit {\n");
    
    sb.append("  name: ").append(name).append("\n");
    sb.append("  abbreviatedName: ").append(abbreviatedName).append("\n");
    sb.append("  category: ").append(category).append("\n");
    sb.append("  minimumAllowedValue: ").append(minimumAllowedValue).append("\n");
    sb.append("  maximumAllowedValue: ").append(maximumAllowedValue).append("\n");
    sb.append("  conversionSteps: ").append(conversionSteps).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
