/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class UserVariables {
  
  @SerializedName("user")
  private Integer user = null;
  @SerializedName("variableId")
  private Integer variableId = null;
  @SerializedName("durationOfAction")
  private Integer durationOfAction = null;
  @SerializedName("fillingValue")
  private Integer fillingValue = null;
  @SerializedName("joinWith")
  private String joinWith = null;
  @SerializedName("maximumAllowedValue")
  private Float maximumAllowedValue = null;
  @SerializedName("minimumAllowedValue")
  private Float minimumAllowedValue = null;
  @SerializedName("onsetDelay")
  private Integer onsetDelay = null;
  @SerializedName("experimentStartTime")
  private String experimentStartTime = null;
  @SerializedName("experimentEndTime")
  private String experimentEndTime = null;
  @SerializedName("alias")
  private String alias = null;

  /**
   * User ID
   **/
  @ApiModelProperty(required = true, value = "User ID")
  public Integer getUser() {
    return user;
  }
  public void setUser(Integer user) {
    this.user = user;
  }

  /**
   * Common variable id
   **/
  @ApiModelProperty(required = true, value = "Common variable id")
  public Integer getVariableId() {
    return variableId;
  }
  public void setVariableId(Integer variableId) {
    this.variableId = variableId;
  }

  /**
   * The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
   **/
  @ApiModelProperty(value = "The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.")
  public Integer getDurationOfAction() {
    return durationOfAction;
  }
  public void setDurationOfAction(Integer durationOfAction) {
    this.durationOfAction = durationOfAction;
  }

  /**
   * When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
   **/
  @ApiModelProperty(value = "When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.")
  public Integer getFillingValue() {
    return fillingValue;
  }
  public void setFillingValue(Integer fillingValue) {
    this.fillingValue = fillingValue;
  }

  /**
   * joinWith
   **/
  @ApiModelProperty(value = "joinWith")
  public String getJoinWith() {
    return joinWith;
  }
  public void setJoinWith(String joinWith) {
    this.joinWith = joinWith;
  }

  /**
   * The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
   **/
  @ApiModelProperty(value = "The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.")
  public Float getMaximumAllowedValue() {
    return maximumAllowedValue;
  }
  public void setMaximumAllowedValue(Float maximumAllowedValue) {
    this.maximumAllowedValue = maximumAllowedValue;
  }

  /**
   * The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
   **/
  @ApiModelProperty(value = "The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.")
  public Float getMinimumAllowedValue() {
    return minimumAllowedValue;
  }
  public void setMinimumAllowedValue(Float minimumAllowedValue) {
    this.minimumAllowedValue = minimumAllowedValue;
  }

  /**
   * onsetDelay
   **/
  @ApiModelProperty(value = "onsetDelay")
  public Integer getOnsetDelay() {
    return onsetDelay;
  }
  public void setOnsetDelay(Integer onsetDelay) {
    this.onsetDelay = onsetDelay;
  }

  /**
   * Earliest measurement startTime that should be used in analysis. For instance, the date when you started tracking something.  Helpful in determining when to start 0 filling since we can assume the absence of a treatment measurement, for instance, indicates that the treatment was not applied rathter than simply not recorded.  Uses ISO string format
   **/
  @ApiModelProperty(value = "Earliest measurement startTime that should be used in analysis. For instance, the date when you started tracking something.  Helpful in determining when to start 0 filling since we can assume the absence of a treatment measurement, for instance, indicates that the treatment was not applied rathter than simply not recorded.  Uses ISO string format")
  public String getExperimentStartTime() {
    return experimentStartTime;
  }
  public void setExperimentStartTime(String experimentStartTime) {
    this.experimentStartTime = experimentStartTime;
  }

  /**
   * Latest measurement startTime that should be used in analysis. For instance, the date when you stopped tracking something.  Helpful in determining when to stop 0 filling since we can assume the absence of a treatment measurement, for instance, indicates that the treatment was not applied rathter than simply not recorded.   Uses ISO string format
   **/
  @ApiModelProperty(value = "Latest measurement startTime that should be used in analysis. For instance, the date when you stopped tracking something.  Helpful in determining when to stop 0 filling since we can assume the absence of a treatment measurement, for instance, indicates that the treatment was not applied rathter than simply not recorded.   Uses ISO string format")
  public String getExperimentEndTime() {
    return experimentEndTime;
  }
  public void setExperimentEndTime(String experimentEndTime) {
    this.experimentEndTime = experimentEndTime;
  }

  /**
   * User-defined display alias for variable name
   **/
  @ApiModelProperty(value = "User-defined display alias for variable name")
  public String getAlias() {
    return alias;
  }
  public void setAlias(String alias) {
    this.alias = alias;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserVariables userVariables = (UserVariables) o;
    return (this.user == null ? userVariables.user == null : this.user.equals(userVariables.user)) &&
        (this.variableId == null ? userVariables.variableId == null : this.variableId.equals(userVariables.variableId)) &&
        (this.durationOfAction == null ? userVariables.durationOfAction == null : this.durationOfAction.equals(userVariables.durationOfAction)) &&
        (this.fillingValue == null ? userVariables.fillingValue == null : this.fillingValue.equals(userVariables.fillingValue)) &&
        (this.joinWith == null ? userVariables.joinWith == null : this.joinWith.equals(userVariables.joinWith)) &&
        (this.maximumAllowedValue == null ? userVariables.maximumAllowedValue == null : this.maximumAllowedValue.equals(userVariables.maximumAllowedValue)) &&
        (this.minimumAllowedValue == null ? userVariables.minimumAllowedValue == null : this.minimumAllowedValue.equals(userVariables.minimumAllowedValue)) &&
        (this.onsetDelay == null ? userVariables.onsetDelay == null : this.onsetDelay.equals(userVariables.onsetDelay)) &&
        (this.experimentStartTime == null ? userVariables.experimentStartTime == null : this.experimentStartTime.equals(userVariables.experimentStartTime)) &&
        (this.experimentEndTime == null ? userVariables.experimentEndTime == null : this.experimentEndTime.equals(userVariables.experimentEndTime)) &&
        (this.alias == null ? userVariables.alias == null : this.alias.equals(userVariables.alias));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.user == null ? 0: this.user.hashCode());
    result = 31 * result + (this.variableId == null ? 0: this.variableId.hashCode());
    result = 31 * result + (this.durationOfAction == null ? 0: this.durationOfAction.hashCode());
    result = 31 * result + (this.fillingValue == null ? 0: this.fillingValue.hashCode());
    result = 31 * result + (this.joinWith == null ? 0: this.joinWith.hashCode());
    result = 31 * result + (this.maximumAllowedValue == null ? 0: this.maximumAllowedValue.hashCode());
    result = 31 * result + (this.minimumAllowedValue == null ? 0: this.minimumAllowedValue.hashCode());
    result = 31 * result + (this.onsetDelay == null ? 0: this.onsetDelay.hashCode());
    result = 31 * result + (this.experimentStartTime == null ? 0: this.experimentStartTime.hashCode());
    result = 31 * result + (this.experimentEndTime == null ? 0: this.experimentEndTime.hashCode());
    result = 31 * result + (this.alias == null ? 0: this.alias.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserVariables {\n");
    
    sb.append("  user: ").append(user).append("\n");
    sb.append("  variableId: ").append(variableId).append("\n");
    sb.append("  durationOfAction: ").append(durationOfAction).append("\n");
    sb.append("  fillingValue: ").append(fillingValue).append("\n");
    sb.append("  joinWith: ").append(joinWith).append("\n");
    sb.append("  maximumAllowedValue: ").append(maximumAllowedValue).append("\n");
    sb.append("  minimumAllowedValue: ").append(minimumAllowedValue).append("\n");
    sb.append("  onsetDelay: ").append(onsetDelay).append("\n");
    sb.append("  experimentStartTime: ").append(experimentStartTime).append("\n");
    sb.append("  experimentEndTime: ").append(experimentEndTime).append("\n");
    sb.append("  alias: ").append(alias).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
