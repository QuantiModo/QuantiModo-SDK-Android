/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Connection {
  
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("userId")
  private Integer userId = null;
  @SerializedName("connectorId")
  private Integer connectorId = null;
  @SerializedName("connectStatus")
  private String connectStatus = null;
  @SerializedName("connectError")
  private String connectError = null;
  @SerializedName("updateRequestedAt")
  private Date updateRequestedAt = null;
  @SerializedName("updateStatus")
  private String updateStatus = null;
  @SerializedName("updateError")
  private String updateError = null;
  @SerializedName("lastSuccessfulUpdatedAt")
  private Date lastSuccessfulUpdatedAt = null;
  @SerializedName("createdAt")
  private Date createdAt = null;
  @SerializedName("updatedAt")
  private Date updatedAt = null;

  /**
   * id
   **/
  @ApiModelProperty(value = "id")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * ID of user that owns this correlation
   **/
  @ApiModelProperty(value = "ID of user that owns this correlation")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  /**
   * The id for the connector data source for which the connection is connected
   **/
  @ApiModelProperty(required = true, value = "The id for the connector data source for which the connection is connected")
  public Integer getConnectorId() {
    return connectorId;
  }
  public void setConnectorId(Integer connectorId) {
    this.connectorId = connectorId;
  }

  /**
   * Indicates whether a connector is currently connected to a service for a user.
   **/
  @ApiModelProperty(value = "Indicates whether a connector is currently connected to a service for a user.")
  public String getConnectStatus() {
    return connectStatus;
  }
  public void setConnectStatus(String connectStatus) {
    this.connectStatus = connectStatus;
  }

  /**
   * Error message if there is a problem with authorizing this connection.
   **/
  @ApiModelProperty(value = "Error message if there is a problem with authorizing this connection.")
  public String getConnectError() {
    return connectError;
  }
  public void setConnectError(String connectError) {
    this.connectError = connectError;
  }

  /**
   * Time at which an update was requested by a user.
   **/
  @ApiModelProperty(value = "Time at which an update was requested by a user.")
  public Date getUpdateRequestedAt() {
    return updateRequestedAt;
  }
  public void setUpdateRequestedAt(Date updateRequestedAt) {
    this.updateRequestedAt = updateRequestedAt;
  }

  /**
   * Indicates whether a connector is currently updated.
   **/
  @ApiModelProperty(value = "Indicates whether a connector is currently updated.")
  public String getUpdateStatus() {
    return updateStatus;
  }
  public void setUpdateStatus(String updateStatus) {
    this.updateStatus = updateStatus;
  }

  /**
   * Indicates if there was an error during the update.
   **/
  @ApiModelProperty(value = "Indicates if there was an error during the update.")
  public String getUpdateError() {
    return updateError;
  }
  public void setUpdateError(String updateError) {
    this.updateError = updateError;
  }

  /**
   * The time at which the connector was last successfully updated.
   **/
  @ApiModelProperty(value = "The time at which the connector was last successfully updated.")
  public Date getLastSuccessfulUpdatedAt() {
    return lastSuccessfulUpdatedAt;
  }
  public void setLastSuccessfulUpdatedAt(Date lastSuccessfulUpdatedAt) {
    this.lastSuccessfulUpdatedAt = lastSuccessfulUpdatedAt;
  }

  /**
   * When the record was first created. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
   **/
  @ApiModelProperty(value = "When the record was first created. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format")
  public Date getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
   **/
  @ApiModelProperty(value = "When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format")
  public Date getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connection connection = (Connection) o;
    return (this.id == null ? connection.id == null : this.id.equals(connection.id)) &&
        (this.userId == null ? connection.userId == null : this.userId.equals(connection.userId)) &&
        (this.connectorId == null ? connection.connectorId == null : this.connectorId.equals(connection.connectorId)) &&
        (this.connectStatus == null ? connection.connectStatus == null : this.connectStatus.equals(connection.connectStatus)) &&
        (this.connectError == null ? connection.connectError == null : this.connectError.equals(connection.connectError)) &&
        (this.updateRequestedAt == null ? connection.updateRequestedAt == null : this.updateRequestedAt.equals(connection.updateRequestedAt)) &&
        (this.updateStatus == null ? connection.updateStatus == null : this.updateStatus.equals(connection.updateStatus)) &&
        (this.updateError == null ? connection.updateError == null : this.updateError.equals(connection.updateError)) &&
        (this.lastSuccessfulUpdatedAt == null ? connection.lastSuccessfulUpdatedAt == null : this.lastSuccessfulUpdatedAt.equals(connection.lastSuccessfulUpdatedAt)) &&
        (this.createdAt == null ? connection.createdAt == null : this.createdAt.equals(connection.createdAt)) &&
        (this.updatedAt == null ? connection.updatedAt == null : this.updatedAt.equals(connection.updatedAt));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.userId == null ? 0: this.userId.hashCode());
    result = 31 * result + (this.connectorId == null ? 0: this.connectorId.hashCode());
    result = 31 * result + (this.connectStatus == null ? 0: this.connectStatus.hashCode());
    result = 31 * result + (this.connectError == null ? 0: this.connectError.hashCode());
    result = 31 * result + (this.updateRequestedAt == null ? 0: this.updateRequestedAt.hashCode());
    result = 31 * result + (this.updateStatus == null ? 0: this.updateStatus.hashCode());
    result = 31 * result + (this.updateError == null ? 0: this.updateError.hashCode());
    result = 31 * result + (this.lastSuccessfulUpdatedAt == null ? 0: this.lastSuccessfulUpdatedAt.hashCode());
    result = 31 * result + (this.createdAt == null ? 0: this.createdAt.hashCode());
    result = 31 * result + (this.updatedAt == null ? 0: this.updatedAt.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connection {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  userId: ").append(userId).append("\n");
    sb.append("  connectorId: ").append(connectorId).append("\n");
    sb.append("  connectStatus: ").append(connectStatus).append("\n");
    sb.append("  connectError: ").append(connectError).append("\n");
    sb.append("  updateRequestedAt: ").append(updateRequestedAt).append("\n");
    sb.append("  updateStatus: ").append(updateStatus).append("\n");
    sb.append("  updateError: ").append(updateError).append("\n");
    sb.append("  lastSuccessfulUpdatedAt: ").append(lastSuccessfulUpdatedAt).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  updatedAt: ").append(updatedAt).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
