/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Permission {
  
  @SerializedName("target")
  private Integer target = null;
  @SerializedName("variableName")
  private String variableName = null;
  @SerializedName("minTimestamp")
  private Integer minTimestamp = null;
  @SerializedName("maxTimestamp")
  private Integer maxTimestamp = null;
  @SerializedName("minTimeOfDay")
  private Integer minTimeOfDay = null;
  @SerializedName("maxTimeOfDay")
  private Integer maxTimeOfDay = null;
  @SerializedName("week")
  private String week = null;

  /**
   * Grant permission to target user or public so they may access measurements within the given parameters. TODO: Rename target to something more intuitive.
   **/
  @ApiModelProperty(required = true, value = "Grant permission to target user or public so they may access measurements within the given parameters. TODO: Rename target to something more intuitive.")
  public Integer getTarget() {
    return target;
  }
  public void setTarget(Integer target) {
    this.target = target;
  }

  /**
   * ORIGINAL Variable name
   **/
  @ApiModelProperty(required = true, value = "ORIGINAL Variable name")
  public String getVariableName() {
    return variableName;
  }
  public void setVariableName(String variableName) {
    this.variableName = variableName;
  }

  /**
   * Earliest time when measurements will be accessible in epoch seconds
   **/
  @ApiModelProperty(required = true, value = "Earliest time when measurements will be accessible in epoch seconds")
  public Integer getMinTimestamp() {
    return minTimestamp;
  }
  public void setMinTimestamp(Integer minTimestamp) {
    this.minTimestamp = minTimestamp;
  }

  /**
   * Latest time when measurements will be accessible in epoch seconds
   **/
  @ApiModelProperty(required = true, value = "Latest time when measurements will be accessible in epoch seconds")
  public Integer getMaxTimestamp() {
    return maxTimestamp;
  }
  public void setMaxTimestamp(Integer maxTimestamp) {
    this.maxTimestamp = maxTimestamp;
  }

  /**
   * Earliest time of day when measurements will be accessible in epoch seconds
   **/
  @ApiModelProperty(required = true, value = "Earliest time of day when measurements will be accessible in epoch seconds")
  public Integer getMinTimeOfDay() {
    return minTimeOfDay;
  }
  public void setMinTimeOfDay(Integer minTimeOfDay) {
    this.minTimeOfDay = minTimeOfDay;
  }

  /**
   * Latest time of day when measurements will be accessible in epoch seconds
   **/
  @ApiModelProperty(required = true, value = "Latest time of day when measurements will be accessible in epoch seconds")
  public Integer getMaxTimeOfDay() {
    return maxTimeOfDay;
  }
  public void setMaxTimeOfDay(Integer maxTimeOfDay) {
    this.maxTimeOfDay = maxTimeOfDay;
  }

  /**
   * Maybe specifies if only weekday measurements should be accessible
   **/
  @ApiModelProperty(required = true, value = "Maybe specifies if only weekday measurements should be accessible")
  public String getWeek() {
    return week;
  }
  public void setWeek(String week) {
    this.week = week;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permission permission = (Permission) o;
    return (this.target == null ? permission.target == null : this.target.equals(permission.target)) &&
        (this.variableName == null ? permission.variableName == null : this.variableName.equals(permission.variableName)) &&
        (this.minTimestamp == null ? permission.minTimestamp == null : this.minTimestamp.equals(permission.minTimestamp)) &&
        (this.maxTimestamp == null ? permission.maxTimestamp == null : this.maxTimestamp.equals(permission.maxTimestamp)) &&
        (this.minTimeOfDay == null ? permission.minTimeOfDay == null : this.minTimeOfDay.equals(permission.minTimeOfDay)) &&
        (this.maxTimeOfDay == null ? permission.maxTimeOfDay == null : this.maxTimeOfDay.equals(permission.maxTimeOfDay)) &&
        (this.week == null ? permission.week == null : this.week.equals(permission.week));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.target == null ? 0: this.target.hashCode());
    result = 31 * result + (this.variableName == null ? 0: this.variableName.hashCode());
    result = 31 * result + (this.minTimestamp == null ? 0: this.minTimestamp.hashCode());
    result = 31 * result + (this.maxTimestamp == null ? 0: this.maxTimestamp.hashCode());
    result = 31 * result + (this.minTimeOfDay == null ? 0: this.minTimeOfDay.hashCode());
    result = 31 * result + (this.maxTimeOfDay == null ? 0: this.maxTimeOfDay.hashCode());
    result = 31 * result + (this.week == null ? 0: this.week.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permission {\n");
    
    sb.append("  target: ").append(target).append("\n");
    sb.append("  variableName: ").append(variableName).append("\n");
    sb.append("  minTimestamp: ").append(minTimestamp).append("\n");
    sb.append("  maxTimestamp: ").append(maxTimestamp).append("\n");
    sb.append("  minTimeOfDay: ").append(minTimeOfDay).append("\n");
    sb.append("  maxTimeOfDay: ").append(maxTimeOfDay).append("\n");
    sb.append("  week: ").append(week).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
