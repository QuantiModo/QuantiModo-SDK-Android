/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class TrackingReminderNotification {
  
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("trackingReminderId")
  private Integer trackingReminderId = null;
  @SerializedName("clientId")
  private String clientId = null;
  @SerializedName("userId")
  private Integer userId = null;
  @SerializedName("variableId")
  private Integer variableId = null;
  @SerializedName("pendingReminderTime")
  private Date pendingReminderTime = null;
  @SerializedName("defaultValue")
  private Float defaultValue = null;
  @SerializedName("reminderSound")
  private String reminderSound = null;
  @SerializedName("popUp")
  private Boolean popUp = null;
  @SerializedName("sms")
  private Boolean sms = null;
  @SerializedName("email")
  private Boolean email = null;
  @SerializedName("notificationBar")
  private Boolean notificationBar = null;
  @SerializedName("updatedAt")
  private Date updatedAt = null;
  @SerializedName("variableName")
  private String variableName = null;
  @SerializedName("variableCategoryName")
  private String variableCategoryName = null;
  @SerializedName("unitAbbreviatedName")
  private String unitAbbreviatedName = null;
  public enum CombinationOperationEnum {
     MEAN,  SUM, 
  };
  @SerializedName("combinationOperation")
  private CombinationOperationEnum combinationOperation = null;

  /**
   * id for the specific PENDING tracking remidner
   **/
  @ApiModelProperty(required = true, value = "id for the specific PENDING tracking remidner")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * id for the repeating tracking remidner
   **/
  @ApiModelProperty(required = true, value = "id for the repeating tracking remidner")
  public Integer getTrackingReminderId() {
    return trackingReminderId;
  }
  public void setTrackingReminderId(Integer trackingReminderId) {
    this.trackingReminderId = trackingReminderId;
  }

  /**
   * clientId
   **/
  @ApiModelProperty(value = "clientId")
  public String getClientId() {
    return clientId;
  }
  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  /**
   * ID of User
   **/
  @ApiModelProperty(value = "ID of User")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  /**
   * Id for the variable to be tracked
   **/
  @ApiModelProperty(value = "Id for the variable to be tracked")
  public Integer getVariableId() {
    return variableId;
  }
  public void setVariableId(Integer variableId) {
    this.variableId = variableId;
  }

  /**
   * UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.
   **/
  @ApiModelProperty(value = "UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.")
  public Date getPendingReminderTime() {
    return pendingReminderTime;
  }
  public void setPendingReminderTime(Date pendingReminderTime) {
    this.pendingReminderTime = pendingReminderTime;
  }

  /**
   * Default value to use for the measurement when tracking
   **/
  @ApiModelProperty(value = "Default value to use for the measurement when tracking")
  public Float getDefaultValue() {
    return defaultValue;
  }
  public void setDefaultValue(Float defaultValue) {
    this.defaultValue = defaultValue;
  }

  /**
   * String identifier for the sound to accompany the reminder
   **/
  @ApiModelProperty(value = "String identifier for the sound to accompany the reminder")
  public String getReminderSound() {
    return reminderSound;
  }
  public void setReminderSound(String reminderSound) {
    this.reminderSound = reminderSound;
  }

  /**
   * True if the reminders should appear as a popup notification
   **/
  @ApiModelProperty(value = "True if the reminders should appear as a popup notification")
  public Boolean getPopUp() {
    return popUp;
  }
  public void setPopUp(Boolean popUp) {
    this.popUp = popUp;
  }

  /**
   * True if the reminders should be delivered via SMS
   **/
  @ApiModelProperty(value = "True if the reminders should be delivered via SMS")
  public Boolean getSms() {
    return sms;
  }
  public void setSms(Boolean sms) {
    this.sms = sms;
  }

  /**
   * True if the reminders should be delivered via email
   **/
  @ApiModelProperty(value = "True if the reminders should be delivered via email")
  public Boolean getEmail() {
    return email;
  }
  public void setEmail(Boolean email) {
    this.email = email;
  }

  /**
   * True if the reminders should appear in the notification bar
   **/
  @ApiModelProperty(value = "True if the reminders should appear in the notification bar")
  public Boolean getNotificationBar() {
    return notificationBar;
  }
  public void setNotificationBar(Boolean notificationBar) {
    this.notificationBar = notificationBar;
  }

  /**
   * When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format. Time zone should be UTC and not local.
   **/
  @ApiModelProperty(value = "When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format. Time zone should be UTC and not local.")
  public Date getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * Name of the variable to be used when sending measurements
   **/
  @ApiModelProperty(value = "Name of the variable to be used when sending measurements")
  public String getVariableName() {
    return variableName;
  }
  public void setVariableName(String variableName) {
    this.variableName = variableName;
  }

  /**
   * Name of the variable category to be used when sending measurements
   **/
  @ApiModelProperty(value = "Name of the variable category to be used when sending measurements")
  public String getVariableCategoryName() {
    return variableCategoryName;
  }
  public void setVariableCategoryName(String variableCategoryName) {
    this.variableCategoryName = variableCategoryName;
  }

  /**
   * Abbreviated name of the unit to be used when sending measurements
   **/
  @ApiModelProperty(value = "Abbreviated name of the unit to be used when sending measurements")
  public String getUnitAbbreviatedName() {
    return unitAbbreviatedName;
  }
  public void setUnitAbbreviatedName(String unitAbbreviatedName) {
    this.unitAbbreviatedName = unitAbbreviatedName;
  }

  /**
   * The way multiple measurements are aggregated over time
   **/
  @ApiModelProperty(value = "The way multiple measurements are aggregated over time")
  public CombinationOperationEnum getCombinationOperation() {
    return combinationOperation;
  }
  public void setCombinationOperation(CombinationOperationEnum combinationOperation) {
    this.combinationOperation = combinationOperation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackingReminderNotification trackingReminderNotification = (TrackingReminderNotification) o;
    return (this.id == null ? trackingReminderNotification.id == null : this.id.equals(trackingReminderNotification.id)) &&
        (this.trackingReminderId == null ? trackingReminderNotification.trackingReminderId == null : this.trackingReminderId.equals(trackingReminderNotification.trackingReminderId)) &&
        (this.clientId == null ? trackingReminderNotification.clientId == null : this.clientId.equals(trackingReminderNotification.clientId)) &&
        (this.userId == null ? trackingReminderNotification.userId == null : this.userId.equals(trackingReminderNotification.userId)) &&
        (this.variableId == null ? trackingReminderNotification.variableId == null : this.variableId.equals(trackingReminderNotification.variableId)) &&
        (this.pendingReminderTime == null ? trackingReminderNotification.pendingReminderTime == null : this.pendingReminderTime.equals(trackingReminderNotification.pendingReminderTime)) &&
        (this.defaultValue == null ? trackingReminderNotification.defaultValue == null : this.defaultValue.equals(trackingReminderNotification.defaultValue)) &&
        (this.reminderSound == null ? trackingReminderNotification.reminderSound == null : this.reminderSound.equals(trackingReminderNotification.reminderSound)) &&
        (this.popUp == null ? trackingReminderNotification.popUp == null : this.popUp.equals(trackingReminderNotification.popUp)) &&
        (this.sms == null ? trackingReminderNotification.sms == null : this.sms.equals(trackingReminderNotification.sms)) &&
        (this.email == null ? trackingReminderNotification.email == null : this.email.equals(trackingReminderNotification.email)) &&
        (this.notificationBar == null ? trackingReminderNotification.notificationBar == null : this.notificationBar.equals(trackingReminderNotification.notificationBar)) &&
        (this.updatedAt == null ? trackingReminderNotification.updatedAt == null : this.updatedAt.equals(trackingReminderNotification.updatedAt)) &&
        (this.variableName == null ? trackingReminderNotification.variableName == null : this.variableName.equals(trackingReminderNotification.variableName)) &&
        (this.variableCategoryName == null ? trackingReminderNotification.variableCategoryName == null : this.variableCategoryName.equals(trackingReminderNotification.variableCategoryName)) &&
        (this.unitAbbreviatedName == null ? trackingReminderNotification.unitAbbreviatedName == null : this.unitAbbreviatedName.equals(trackingReminderNotification.unitAbbreviatedName)) &&
        (this.combinationOperation == null ? trackingReminderNotification.combinationOperation == null : this.combinationOperation.equals(trackingReminderNotification.combinationOperation));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.trackingReminderId == null ? 0: this.trackingReminderId.hashCode());
    result = 31 * result + (this.clientId == null ? 0: this.clientId.hashCode());
    result = 31 * result + (this.userId == null ? 0: this.userId.hashCode());
    result = 31 * result + (this.variableId == null ? 0: this.variableId.hashCode());
    result = 31 * result + (this.pendingReminderTime == null ? 0: this.pendingReminderTime.hashCode());
    result = 31 * result + (this.defaultValue == null ? 0: this.defaultValue.hashCode());
    result = 31 * result + (this.reminderSound == null ? 0: this.reminderSound.hashCode());
    result = 31 * result + (this.popUp == null ? 0: this.popUp.hashCode());
    result = 31 * result + (this.sms == null ? 0: this.sms.hashCode());
    result = 31 * result + (this.email == null ? 0: this.email.hashCode());
    result = 31 * result + (this.notificationBar == null ? 0: this.notificationBar.hashCode());
    result = 31 * result + (this.updatedAt == null ? 0: this.updatedAt.hashCode());
    result = 31 * result + (this.variableName == null ? 0: this.variableName.hashCode());
    result = 31 * result + (this.variableCategoryName == null ? 0: this.variableCategoryName.hashCode());
    result = 31 * result + (this.unitAbbreviatedName == null ? 0: this.unitAbbreviatedName.hashCode());
    result = 31 * result + (this.combinationOperation == null ? 0: this.combinationOperation.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackingReminderNotification {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  trackingReminderId: ").append(trackingReminderId).append("\n");
    sb.append("  clientId: ").append(clientId).append("\n");
    sb.append("  userId: ").append(userId).append("\n");
    sb.append("  variableId: ").append(variableId).append("\n");
    sb.append("  pendingReminderTime: ").append(pendingReminderTime).append("\n");
    sb.append("  defaultValue: ").append(defaultValue).append("\n");
    sb.append("  reminderSound: ").append(reminderSound).append("\n");
    sb.append("  popUp: ").append(popUp).append("\n");
    sb.append("  sms: ").append(sms).append("\n");
    sb.append("  email: ").append(email).append("\n");
    sb.append("  notificationBar: ").append(notificationBar).append("\n");
    sb.append("  updatedAt: ").append(updatedAt).append("\n");
    sb.append("  variableName: ").append(variableName).append("\n");
    sb.append("  variableCategoryName: ").append(variableCategoryName).append("\n");
    sb.append("  unitAbbreviatedName: ").append(unitAbbreviatedName).append("\n");
    sb.append("  combinationOperation: ").append(combinationOperation).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
