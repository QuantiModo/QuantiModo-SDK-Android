/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class UserTag {
  
  @SerializedName("taggedVariableId")
  private Integer taggedVariableId = null;
  @SerializedName("tagVariableId")
  private Integer tagVariableId = null;
  @SerializedName("conversionFactor")
  private BigDecimal conversionFactor = null;

  /**
   * This is the id of the variable being tagged with an ingredient or something.
   **/
  @ApiModelProperty(required = true, value = "This is the id of the variable being tagged with an ingredient or something.")
  public Integer getTaggedVariableId() {
    return taggedVariableId;
  }
  public void setTaggedVariableId(Integer taggedVariableId) {
    this.taggedVariableId = taggedVariableId;
  }

  /**
   * This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
   **/
  @ApiModelProperty(required = true, value = "This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.")
  public Integer getTagVariableId() {
    return tagVariableId;
  }
  public void setTagVariableId(Integer tagVariableId) {
    this.tagVariableId = tagVariableId;
  }

  /**
   * Number by which we multiply the tagged variable value to obtain the tag variable (ingredient) value
   **/
  @ApiModelProperty(required = true, value = "Number by which we multiply the tagged variable value to obtain the tag variable (ingredient) value")
  public BigDecimal getConversionFactor() {
    return conversionFactor;
  }
  public void setConversionFactor(BigDecimal conversionFactor) {
    this.conversionFactor = conversionFactor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserTag userTag = (UserTag) o;
    return (this.taggedVariableId == null ? userTag.taggedVariableId == null : this.taggedVariableId.equals(userTag.taggedVariableId)) &&
        (this.tagVariableId == null ? userTag.tagVariableId == null : this.tagVariableId.equals(userTag.tagVariableId)) &&
        (this.conversionFactor == null ? userTag.conversionFactor == null : this.conversionFactor.equals(userTag.conversionFactor));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.taggedVariableId == null ? 0: this.taggedVariableId.hashCode());
    result = 31 * result + (this.tagVariableId == null ? 0: this.tagVariableId.hashCode());
    result = 31 * result + (this.conversionFactor == null ? 0: this.conversionFactor.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserTag {\n");
    
    sb.append("  taggedVariableId: ").append(taggedVariableId).append("\n");
    sb.append("  tagVariableId: ").append(tagVariableId).append("\n");
    sb.append("  conversionFactor: ").append(conversionFactor).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
